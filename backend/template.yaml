AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Invoice SaaS Backend

Globals:
  Function:
    Timeout: 30
    Runtime: nodejs18.x
    Environment:
      Variables:
        INVOICES_TABLE: !Ref InvoicesTable
        USERS_TABLE: !Ref UsersTable
        COGNITO_USER_POOL_ID: !Ref UserPool
        S3_BUCKET: !Ref InvoicesBucket

Resources:
  # API Gateway
  InvoiceApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn

  # Lambda Functions
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/auth/
      Handler: index.handler
      Events:
        SignUp:
          Type: Api
          Properties:
            RestApiId: !Ref InvoiceApi
            Path: /auth/signup
            Method: post
            Auth:
              Authorizer: NONE
        Login:
          Type: Api
          Properties:
            RestApiId: !Ref InvoiceApi
            Path: /auth/login
            Method: post
            Auth:
              Authorizer: NONE

  InvoiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/invoices/
      Handler: index.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref InvoicesTable
        - S3CrudPolicy:
            BucketName: !Ref InvoicesBucket
      Events:
        CreateInvoice:
          Type: Api
          Properties:
            RestApiId: !Ref InvoiceApi
            Path: /invoices
            Method: post
        GetInvoices:
          Type: Api
          Properties:
            RestApiId: !Ref InvoiceApi
            Path: /invoices
            Method: get
        GetInvoice:
          Type: Api
          Properties:
            RestApiId: !Ref InvoiceApi
            Path: /invoices/{id}
            Method: get
        DeleteInvoice:
          Type: Api
          Properties:
            RestApiId: !Ref InvoiceApi
            Path: /invoices/{id}
            Method: delete

  # DynamoDB Tables
  InvoicesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: invoices
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: invoice_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: invoice_id
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: users
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: invoice-users
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: invoice-client
      GenerateSecret: false

  # S3 Bucket
  InvoicesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "invoice-files-${AWS::AccountId}"
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE]
            AllowedOrigins: ['*']

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${InvoiceApi}.execute-api.${AWS::Region}.amazonaws.com/dev/"
  UserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref UserPool
  UserPoolClientId:
    Description: "Cognito User Pool Client ID"
    Value: !Ref UserPoolClient